-------------------------------------------------------------------------------
 ASSEMBLER NOTES
-------------------------------------------------------------------------------
 Legend: [ seen in assembler ] :: [ subsection to explain ] :: [ explanation ]
-------------------------------------------------------------------------------

.file "simple.c" :: .file ::
    Informs GAS that a new logical file with this name is being started.

.cfi_startproc :: .cfi_start_proc ::
    Stack unwinding/exception handling. To disable: -fno-asynchronous-unwind-tables

xorl %eax, %eax :: xorl %eax, %eax::
    efficient way to assign 0 to eax.

movq -8(%rbp), %rax :: -8(%rbp) ::
    Dereference value at register rbp, then subtract 8

call strcpy@PLT :: @PLT ::
    "Procedure Linkage Table" Used in dynamic loading and linking. The function
    being called may be mapped anywhere within a process' virtual memory. When
    shared libraries were first introduced, they lacked PLTs and had one static
    location for shared functions. Now, the PLT in conjunction with the GOT, or
    "Global Offset Table", map each memory independent process to the function
    they are trying to call. The first call to PLT for a given function will run
    some initialization code which determines the location of that function for
    all subsequent calls, including calls from other processes. Thus, no process
    can know the location of a particular shared function at runtime, but is still
    able to call it.

-------------------------------------------------------------------------------
 GENERAL NOTES
-------------------------------------------------------------------------------
 Legend: [ context ] :: [ concept/keyword/acronym ] :: [ explanation ]
-------------------------------------------------------------------------------
PLT && GOT :: ALSR ::
    Address Space Layout Randomization. Relies on randomizing the base address of
    shared libraries. Ideas of the GOT (Global Offset Table), PLT (Procedure Linkage
    Table), PIEs (Position Independent Executables) && PIC (Position Independent
    Code) are all founded on ASLR.

How is libc loaded at runtime? :: ELF ::
    ELF = "Executable Linker Format"
